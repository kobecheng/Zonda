// Generated by CoffeeScript 1.6.1
var Backbone, assert, localStorageSync, vows;

vows = require("vows");

assert = require("assert");

require("seajs");

require("../../etc/env");

require("../mock-module/window");

localStorageSync = require("../../util/0.1.2/src/localStorageSync/localStorageSync");

Backbone = require("../../vendor/backbone/0.9.10/backbone");

Backbone.sync = localStorageSync;

vows.describe("LocalStorage Server for Backbone.sync").addBatch({
  "API": {
    topic: function() {
      return Backbone.sync;
    },
    "is function": function(topic) {
      return assert.equal(typeof topic, "function");
    }
  },
  "sync::create, Model::save": {
    topic: function() {
      var model, res;
      model = new Backbone.Model();
      model.url = "/mock";
      res = "";
      model.on("change", function(data) {
        return res = data;
      });
      model.save({
        name: "shiyang",
        age: 23
      });
      return res;
    },
    "get the id": function(res) {
      assert.ok(res);
      assert.ok(res.id);
      return assert.equal(typeof res.id, "string");
    },
    "get the name": function(res) {
      assert.ok(res.toJSON().name);
      return assert.equal(res.toJSON().name, "shiyang");
    },
    "get the age": function(res) {
      assert.ok(res.toJSON().age);
      return assert.equal(res.toJSON().age, 23);
    }
  },
  "sync::create, Model::set, save": {
    topic: function() {
      var model, res;
      model = new Backbone.Model();
      model.url = "/mock";
      res = "";
      model.on("change", function(data) {
        return res = data;
      });
      model.set({
        name: "shiyang",
        age: 23
      });
      model.save();
      return res;
    },
    "get the id": function(res) {
      assert.ok(res);
      assert.ok(res.id);
      return assert.equal(typeof res.id, "string");
    },
    "get the name": function(res) {
      assert.ok(res.toJSON().name);
      return assert.equal(res.toJSON().name, "shiyang");
    }
  },
  "sync::create, Collection::create": {
    topic: function() {
      var Collection, Model, collection, res;
      Model = Backbone.Model.extend({
        url: "/mock"
      });
      Collection = Backbone.Collection.extend({
        url: "mock",
        initialize: function(Model) {
          return this.model = Model;
        }
      });
      collection = new Collection(Model);
      res = "";
      collection.on("change", function(data) {
        return res = data;
      });
      collection.create({
        name: "degas",
        sex: "man"
      });
      return res;
    },
    "id of model in Collection": function(res) {
      return assert.ok(res.id);
    },
    "name of data in model in Collection": function(res) {
      assert.ok(res.toJSON().name);
      return assert.equal(res.toJSON().name, "degas");
    }
  }
}).addBatch({
  "sync::read": {
    topic: function() {
      var Collection, Model, collection, res;
      Model = Backbone.Model.extend({
        url: "/mock"
      });
      Collection = Backbone.Collection.extend({
        url: "/mock",
        initialize: function(model) {
          return this.model = model;
        }
      });
      collection = new Collection(Model);
      res = "";
      collection.fetch({
        error: function(err) {}
      });
      collection = JSON.stringify(collection);
      return collection;
    },
    "fetch to update the Collection": function(res) {
      return console.dir(res);
    }
  }
})["export"](module);
