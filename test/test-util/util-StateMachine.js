// Generated by CoffeeScript 1.6.1
var StateMachine, assert, vows;

vows = require("vows");

assert = require("assert");

require("seajs");

require("../../etc/env");

StateMachine = require("../../util/0.1.2/src/StateMachine/StateMachine");

vows.describe("StateMachine").addBatch({
  "API StateMachine": {
    topic: function() {
      return StateMachine;
    },
    "Constructor": function(res) {
      assert.ok(res);
      return assert.strictEqual(typeof res, "function");
    }
  },
  "API StateMachine instance": {
    topic: function() {
      var res;
      res = new StateMachine;
      return res;
    },
    "instance has a 'add' method": function(res) {
      assert.ok(res);
      assert.ok(res.add);
      assert.strictEqual(typeof res, "object");
      return assert.strictEqual(typeof res.add, "function");
    }
  },
  "active method": {
    topic: function() {
      var list_view, list_view_status, main_view, main_view_status, stateMachine, sub_view, sub_view_status;
      stateMachine = new StateMachine;
      main_view_status = true;
      list_view_status = false;
      sub_view_status = false;
      main_view = {
        activate: function() {
          return main_view_status = true;
        },
        deactivate: function() {
          return main_view_status = false;
        }
      };
      sub_view = {
        activate: function() {
          return sub_view_status = true;
        },
        deactivate: function() {
          return sub_view_status = false;
        }
      };
      list_view = {
        activate: function() {
          return list_view_status = true;
        },
        deactivate: function() {
          return list_view_status = false;
        }
      };
      stateMachine.add(main_view);
      stateMachine.add(sub_view);
      stateMachine.add(list_view);
      sub_view.active();
      return {
        main_view_status: main_view_status,
        sub_view_status: sub_view_status,
        list_view_status: list_view_status
      };
    },
    "sub_view is actived": function(status) {
      assert.ok(status);
      return assert.ok(status.sub_view_status);
    },
    "main_view is deactived": function(status) {
      assert.ok(status);
      return assert.strictEqual(status.main_view_status, false);
    },
    "list_view is deactived": function(status) {
      assert.ok(status);
      return assert.strictEqual(status.list_view_status, false);
    }
  }
})["export"](module);
